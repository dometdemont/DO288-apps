def _ENDPOINT = "undefined"
def _PROJECT = "undefined"

pipeline {
    options {
        // set a timeout of 30 minutes for this pipeline
        timeout(time: 30, unit: 'MINUTES')
    }
    agent {
      node {
        label 'master'
      }
    }
    parameters {
        string(name: '_USER', defaultValue: 'developer', description: 'OpenShift user used to instantiate resources')
        password(name: '_PASSWORD', defaultValue: 'developer', description: 'OpenShift user password')
    }
    stages {
        stage('OpenShift context') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                          _ENDPOINT = openshift.selector( 'route/${_NAME}').object().spec.host
                          _PROJECT = openshift.project()
                          echo "OpenShift context: using project ${openshift.project()} in cluster ${openshift.cluster()} with name ${_NAME} and route ${_ENDPOINT}"
                          }
                    }
                }
            }
        }

      stage('Get default and bs-set session dump') {
        steps {
              sh """
              [[ \$(curl http://${_ENDPOINT}/hpe5g.html/dump) == [] ]]
              curl -f http://${_ENDPOINT}/bs-set.html/dump
              """
          }
      }
      stage('Deploy bs-set') {
        steps {
          script {
            openshift.withCluster() {
                  sh """
                  oc login -u ${params._USER} -p ${params._PASSWORD}
                  curl -f -X PUT -H \"Content-Type: application/json\" http://${_ENDPOINT}/bs-set.basic.html/hpe5g.sh?project=${_PROJECT} --data '' > bs-set.sh &&
                  chmod a+x bs-set.sh && ./bs-set.sh
                  """
            }
          }
        }
      }
      stage('Get error on invalid session') {
        steps {
              sh "[[ \$(curl http://${_ENDPOINT}/unlikely.html/dump) != 0 ]]"
          }
      }

      stage('Manual approval') {
        steps {
          timeout(time: 60, unit: 'MINUTES') {
          input message: "Confirm success?"
          }
        }
      }
    }
}